var searchIndex = JSON.parse('{\
"fcaptcha":{"doc":"fcaptcha","t":"ACCCACCAACCCAENNNNNNLLFFLLLLLLLLLLLLLLLFFNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLFFLDDLLLLFLLLLLLLLLLLLLFLL","n":["build_puzzle","build_puzzle","build_puzzle_service","build_puzzle_with","config","get","get_timestamp","util","verify_puzzle_result","verify_puzzle_result","verify_puzzle_result_service","verify_puzzle_result_with","web","BuildPuzzleError","Conversion","DataAccess","Encoding","Hashing","TimeError","Unknown","borrow","borrow_mut","build_puzzle","build_puzzle_with","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip","get","get_timestamp","Conversion","DataAccess","DecodeBas64","DecodeHex","DuplicateSolution","InputMalformed","PuzzleExpired","PuzzleReuse","SignatureKeyInvalid","SignatureMismatch","SolutionBelowThreshold","TimeError","Unknown","VerifyPuzzleResultError","borrow","borrow_mut","eq","fmt","fmt","from","from","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","verify_puzzle_result","verify_puzzle_result_with","vzip","BuildPuzzleServiceInput","VerifyPuzzleResultServiceInput","borrow","borrow","borrow_mut","borrow_mut","build_puzzle_service","deserialize","deserialize","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","verify_puzzle_result_service","vzip","vzip"],"q":[[0,"fcaptcha"],[13,"fcaptcha::build_puzzle"],[39,"fcaptcha::config"],[40,"fcaptcha::util"],[41,"fcaptcha::verify_puzzle_result"],[77,"fcaptcha::web"]],"d":["Implements building puzzles..","","","","Implements configuration of the crate.","","","Implements utility functionality.","Implements verifying puzzle results.","","","","Serves the functionality over the web. Requires the <code>web</code> …","Describes an error that occurred during building a puzzle.","Data conversion failed.","Data access failed.","Encoding failed.","Hashing failed.","Failed to get the time.","Unknown error.","","","Builds a new puzzle for an <code>ip_address</code>. Can be configured …","Builds a new puzzle. In contrast to build_puzzle all input …","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Get a configuration element.","Get a timestamp in seconds since the Unix epoch.","Data conversion failed.","Data access failed.","Decoding base64 failed.","Decoding hex failed.","Duplicate Solution.","Input malformed","Puzzle is expired.","Puzzle is reused.","Signature key invalid.","Signatures do not match.","Solution below threshold.","Failed to get the time.","Unknown error.","Describes an error that occurred during verifying a puzzle …","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Verifies a puzzle result given by <code>solution</code>. Can be …","Verifies a puzzle result. In contrast to …","","An input to the puzzle builder web service.","An input to the puzzle verification web service.","","","","","A web service that serves puzzles to be solved.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","A web service that verifies solutions to a puzzle.","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,19,0,0,25,30,25,30,0,25,30,30,25,30,25,30,25,30,25,30,25,30,0,25,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[4,[2,3]]]],[[1,5,5,[7,[6]],5],[[4,[2,3]]]],[[3,8],9],[[3,8],9],[10,3],[[]],[11,3],[12,3],[13,3],[[]],[14],[3,[[16,[15]]]],[[],2],[[],4],[[],4],[[],17],[[]],[1,18],[[],[[4,[5,13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[19,19],20],[[19,8],9],[[19,8],9],[[]],[10,19],[21,19],[13,19],[22,19],[12,19],[23,19],[[]],[14],[19,[[16,[15]]]],[[],2],[[],4],[[],4],[[],17],[1,[[4,[19]]]],[[1,5,5,[7,[6]]],[[4,[19]]]],[[]],0,0,[[]],[[]],[[]],[[]],[[24,[26,[25]]],[[28,[27]]]],[29,[[4,[25]]]],[29,[[4,[30]]]],[[30,8],9],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[[31,[30]]],[[28,[27]]]],[[]],[[]]],"c":[],"p":[[15,"str"],[3,"String"],[4,"BuildPuzzleError"],[4,"Result"],[15,"u64"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[3,"InvalidLength"],[4,"EncodeSliceError"],[3,"PoisonError"],[3,"SystemTimeError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"TypeId"],[8,"Deserialize"],[4,"VerifyPuzzleResultError"],[15,"bool"],[3,"MacError"],[4,"DecodeError"],[4,"FromHexError"],[3,"HttpRequest"],[3,"BuildPuzzleServiceInput"],[3,"Query"],[8,"Responder"],[6,"Result"],[8,"Deserializer"],[3,"VerifyPuzzleResultServiceInput"],[3,"Json"]]},\
"fcaptcha_server":{"doc":"","t":"F","n":["main"],"q":[[0,"fcaptcha_server"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
